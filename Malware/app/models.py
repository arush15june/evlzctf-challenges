import uuid
import datetime
import helpers
from functools import reduce
from sqlalchemy import Column, Integer, String, ForeignKey, DateTime, Boolean
from sqlalchemy.orm import relationship
from database import Base
from sqlalchemy.orm import backref

class User(Base):
    __tablename__ = "users"
    username = Column(String(50), primary_key=True, unique=True)
    password = Column(String(50))
    target_url = relationship("TargetURL", backref='users', uselist=False)
    admin = Column(Boolean, default=False)
    
    def __init__(self, username, password):
        self.username = username
        self.password = password
        self.admin = False
        self.target_url = TargetURL()

    def __repr__(self):
        return '<User {} URL: {}>'.format(self.username, self.target_url.url)

    @property
    def is_authenticated(self):
        return True

    @property
    def is_active(self):
        return True

    @property
    def is_anonymous(self):
        return False

    def get_id(self):
        return str(self.username)
    

class TargetURL(Base):
    __tablename__ = 'targeturls'
    user_username = Column(String(50), ForeignKey('users.username'))
    uuid = Column(String(32), primary_key=True, default=uuid.uuid4().hex)
    url = Column(String(128), default=helpers.generateRandomURL())

    def __init__(self):
        self.uuid = uuid.uuid4().hex
        self.url = helpers.generateRandomURL()

    def __repr__(self):
        return "<TargetURL {} URL: {} username: {}".format(self.uuid, self.url, self.user_username)